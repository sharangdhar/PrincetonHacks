from Tkinter import *
import copy, sys
sys.path.append('D:\\Documents\\LeapDeveloperKit\\LeapSDK\\lib')
sys.path.append('D:\\Documents\\LeapDeveloperKit\\LeapSDK\\lib\\x86')
import random
from random import choice
import time
import serial
import Leap
# serial port

ser = serial.Serial()# these 4 lines taken from arduino forum
ser.port = 'COM12'
ser.baudrate = 9600
ser.open()

a = 0

class LeapListener(Leap.Listener):
    def on_frame(self, controller):
        frame = controller.frame()
        if not frame.hands.is_empty:
            # Get the first hand
            self.hand = frame.hands[0]
            self.normal = self.hand.palm_normal
            global a
            a = self.normal.x

class MGame(object):
        
    def init(self):
        self.listener = LeapListener()
        self.controller = Leap.Controller()
        self.listener.on_frame(self.controller)
        self.initImages()
        self.defineBoard()
        self.backColor = "black"
        self.gameOver = False
        self.initGameOver = 0
        self.finGameOver = 0
        self.startMove = time.time()
        self.userMovetimestart = time.time()
        self.byte = 0
        self.timerStop=False
        self.paused=False
        self.count = 3
        self.countDowntimer=True
        self.nextMove = True
        self.gameOn=False
        self.i = 1
        self.timei = time.time()

        # Have the sample listener receive events from the controller
        self.controller.add_listener(self.listener)
        self.redrawAll()

    def initImages(self):
        self.block1 = PhotoImage(file="block1.gif")
        self.block2 = PhotoImage(file="block2.gif")
        self.block3 = PhotoImage(file="block3.gif")
        self.block4 = PhotoImage(file="block4.gif")
        self.userBot= PhotoImage(file="userBot.gif")
        self.back = PhotoImage(file="galaxy1.gif");
     #if need to change the board, put it in the timer fired function
    #try idea of mod for continuity

    def defineBoard(self):
        (rows,cols) = (self.rows,self.cols)
        self.board = [[None]*cols for i in range(rows)]
        #initing with basic board for now
        for col in range(cols):
            self.board[rows-1][col]="block4"
        for row in range(rows):
            self.board[row][0]="block1"
            self.board[row][cols-1]="block1"
        for row in range(rows):
            self.board[row][1]="block2"
            self.board[row][cols-2]="block3"
        self.board[rows-1][1]="block1"
        self.board[rows-1][cols-2]="block1"
        self.board[rows/2][cols/2]="userbot"
        self.ubotpos = (rows/2,cols/2,0,0)                            


    def timerFired(self):
        if self.timerStop==False:
            if self.gameOn==True:
                if(self.gameOver==True):
                    self.finGameOver = time.time()
                if(self.finGameOver-self.initGameOver>1):
                    self.controller.remove_listener(self.listener)
                    self.init()
                else:
 #                  self.finishMove = time.time()
                    #going down every 2 seconds
 #                   if(self.finishMove - self.startMove>1.5):
#                        self.moveBot(1,0)
#                        self.startMove = time.time()
                    self.userMovetimefin = time.time()
                    if(self.userMovetimefin-self.userMovetimestart>2):
                        if self.nextMove == True:
                            (row,col)=self.runUserInput()
                            self.moveBot(row,col)
                        self.userMovetimestart = time.time()
                    if self.nextMove == True:
                        global a
                        x = a
                        print a
                        if(x>0.1):
                            game.moveBot(0,-1)
                        elif x<(-0.1):
                            game.moveBot(0,1)
                        a = 0
                self.redrawAll()
            elif self.gameOn==False and self.countDowntimer==True:
                self.timerCount()
                self.redrawAll()
        
        def f():
            self.timerFired()
        delay=30
        self.canvas.after(delay,f)

    def keyPressed(self,event):
        if(self.gameOver==False and self.paused==False
           and self.countDowntimer==False):
            if (self.nextMove == True):
                if event.keysym=="Up":
                    self.moveBot(-1,0)
                if event.keysym=="Down":
                    self.moveBot(1,0)
                if event.keysym=="Left":
                    self.moveBot(0,-1)
                if event.keysym=="Right":
                    self.moveBot(0,1)
        if event.char=="p":
            if self.timerStop==False:
                self.paused =True
                self.timerStop=True
            else:
                self.paused=False
                self.timerStop=False
        self.redrawAll()

    def defpressMove(self,event): #for moving defender in response to
                                    #arrow keys
        if  self.nextMove==True:
            if event.keysym=="Up":
                self.moveDefender(-1,0) #opposite movement
                self.botrotDir=(-1,0)
            elif event.keysym=="Down":
                self.moveDefender(1,0)
                self.botrotDir=(1,0)
            elif event.keysym=="Right":
                self.moveDefender(0,1)
                self.botrotDir=(0,1)
            elif event.keysym=="Left":
                self.moveDefender(0,-1)
                self.botrotDir=(0,-1)
                        
    def moveBot(self,deltaVer,deltaHor):
        if self.gameOver == False and self.nextMove==True:
            (row,col)=self.ubotpos[0:2]
            self.board[row][col]=None;
            (row,col) = (row+deltaVer,col+deltaHor)
            if((row>self.rows or col>=self.cols
                    or row<0 or col<=0) or (self.board[row][col] != None
                                        and self.board[row][col][0:5]=="block")):
                self.gameOver = True
                self.initGameOver = time.time()
                print self.gameOver
            elif(not(self.gameOver==True and deltaVer==-1)):
                print "G"
                self.board[row][col]="Nuserbot"
                self.nextMove = False
                self.ubotpos=(row,col,deltaVer,deltaHor)
               


                   
    def userBotImageRot(self,left,top): #draws rotated Uenemy on screen
        self.canvas.create_image(left,top, image = self.userBot,anchor=NW)

    def drawDefender(self,row,col):#to animate the defender
        if self.nextMove==False:
            cellsize=self.cellsize
            margin=self.margin
            (drow,dcol)=self.ubotpos[2:4]
            if (drow,dcol)==(-1,0) or (drow,dcol)==(1,0): #north
                if (drow,dcol)==(-1,0):
                    self.finalx=cellsize*col + margin
                    self.finaly= row*cellsize + margin #final y or top
                    self.presenty=self.finaly +cellsize-10*self.i 
                    self.userBotImageRot(self.finalx,self.presenty)
                elif(drow,dcol)==(1,0): #south
                    self.finalx=cellsize*col + margin
                    self.finaly= (row)*cellsize + margin #final y or top
                    self.presenty=(row-1)*cellsize+margin + 10*self.i 
                    self.userBotImageRot(self.finalx,self.presenty)
                if self.presenty==self.finaly:
                    self.board[row][col]="userbot"
                    self.nextMove=True
            self.drawAnimDefenderHelper(row,col,margin,cellsize)
            if self.i==5:
                self.i=1
            else:
                self.i +=1
       
    def drawAnimDefenderHelper(self,row,col,margin,cellsize):
        #helper for smooth animation
        (drow,dcol)=self.ubotpos[2:4]
        if (drow,dcol)==(0,1) or (drow,dcol)==(0,-1): 
                if (drow,dcol)==(0,1):#east
                    self.finaly= row*cellsize + margin #final y or top
                    self.finalx=cellsize*(col) + margin
                    self.presentx=cellsize*(col-1) + margin + self.i*10 
                    self.userBotImageRot(self.presentx,self.finaly)
                elif (drow,dcol)==(0,-1): #west
                    self.finaly= row*cellsize + margin #final y or top
                    self.finalx=cellsize*(col) + margin
                    self.presentx=cellsize*(col+1) + margin - self.i*10 
                    self.userBotImageRot(self.presentx,self.finaly)
                if self.presentx==self.finalx:
                    self.board[row][col]="userbot"
                    self.nextMove=True
        

     
                           
    def drawBoard(self):
        margin = self.margin
        border = margin/10
        #makes border for game screen
        self.canvas.create_rectangle(margin-margin/border,margin-margin/border,
                                     self.width-margin+margin/border,
                                     self.height-margin+margin/border,fill="white")
        #colors the board we will play on
     #   self.canvas.create_rectangle(margin,margin,self.width-margin,
    #                                 self.height-margin,fill=self.backColor)
        self.canvas.create_image(0,0,image = self.back, anchor = NW);
        self.drawBoardHelper()
    def drawBoardHelper(self):
        for row in range(self.rows):
            for col in range(self.cols):
                self.calculateBlock(row,col)
                
    #finds coordinates for the block 
    def calculateBlock(self,row,col):
        cellsize = self.cellsize
        margin = self.margin
        (left,top) = (cellsize*col+ margin, row*cellsize+margin)
        (right, bottom) = (left+cellsize,top+cellsize)
        self.drawBlock(left,top,row,col)

    def drawBlock(self,left,top,row,col):
        if(self.board[row][col]=="block1"):
            self.canvas.create_image(left,top,image=self.block1,anchor=NW)
        if(self.board[row][col]=="block2"):
            self.canvas.create_image(left,top,image=self.block2,anchor=NW)
        if(self.board[row][col]=="block3"):
            self.canvas.create_image(left,top,image=self.block3,anchor=NW)
        if(self.board[row][col]=="block4"):
            self.canvas.create_image(left,top,image=self.block4,anchor=NW)
        if(self.board[row][col]=="Nuserbot"):
            self.drawDefender(row,col)
        if(self.board[row][col]=="userbot"):
            self.canvas.create_image(left,top,image=self.userBot,anchor=NW)


    def timerCount(self):
        self.timef = time.time()
        if self.timef - self.timei>=1.000:
            self.count-=1
            self.timei=time.time()
            if self.count==0:
                self.gameOn=True
                self.countDowntimer=False
            
    def drawTimer(self):
        top = self.width/2 
        left=self.width/2
        msg=str(self.count)
        self.canvas.create_text(top,left,text=msg,font="arial 42 bold",
                                fill="white")

    def drawPaused(self):
        top = self.width/2
        left=self.width/2
        msg=str("Paused")
        self.canvas.create_text(top,left,text=msg,font="arial 42 bold",
                                fill="white")
 

    def redrawAll(self):
        self.canvas.delete(ALL)
        if self.timerStop==False and self.countDowntimer==True:
            self.drawBoard()
            self.drawTimer()
        elif self.timerStop==True and self.paused==True:
            self.drawBoard()
            self.drawPaused()
        else:
            self.drawBoard()

    def runUserInput(self):
        index = 0;
        if ser.isOpen():
            while index < 2:
                self.byte = int(ser.read())
                print self.byte
                index+=1
        if self.byte == 0:
            self.byte=1
        else:
            self.byte = -1
        #1 goes down opposite direction
        return (self.byte,0)

    def run(self):
        self.root=Tk()
        self.cellsize = 50
        self.rows = 10
        self.cols = 15
        self.margin = 40
        self.width = self.cols*self.cellsize + 2*self.margin
        self.height = self.rows*self.cellsize + 2*self.margin
        self.canvas=Canvas(self.root,width=self.width, height=self.height,
                          bg="black")
        self.canvas.pack()
        self.init()
        self.root.bind("<Key>", lambda event: self.keyPressed(event))
        self.timerFired()
        self.root.mainloop()


game = MGame()
game.run()
